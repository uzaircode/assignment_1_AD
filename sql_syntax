DROP table if exists Movie CASCADE;
DROP table if exists Booking CASCADE;
DROP table if exists Cinema CASCADE; 
DROP table if exists Showtime CASCADE;
DROP table if exists Promotion CASCADE;
DROP table if exists Customer CASCADE;
DROP table if exists TotalDurationTable CASCADE;


CREATE TABLE Movie (
	Movie_ID varchar(10) NOT NULL,
	Movie_Title varchar(40),
	Genre varchar(30),
	Duration time,
	Release_Date date,
	classification varchar(10),
	
	CONSTRAINT movie_ID PRIMARY KEY (Movie_ID)
);

CREATE TABLE Cinema (
	Cinema_ID varchar(10) NOT NULL,
	Location varchar(20), 
	Hall_ID varchar(10),
	Capacity int,
	
	CONSTRAINT Cinema_ID PRIMARY KEY (Cinema_ID)
);

CREATE TABLE Showtime (
	Showtime_ID varchar(10) NOT NULL,
	Movie_ID varchar(10),
	Cinema_ID varchar(10),
	Start_Time time,
	End_Time time,
	
	CONSTRAINT Showtime_ID PRIMARY KEY (Showtime_ID),
    FOREIGN KEY (Movie_ID) REFERENCES Movie(Movie_ID),
	FOREIGN KEY (Cinema_ID) REFERENCES Cinema(Cinema_ID)

);

CREATE TABLE Promotion (
	Promotion_ID varchar(10) NOT NULL,
	Description varchar(100),
	Start_Date Date,
	End_Date Date,
	
	CONSTRAINT Promotion_ID PRIMARY KEY (Promotion_ID)
);

CREATE TABLE Customer (
	Customer_ID varchar(10) NOT NULL,
	Name varchar(100),
	Age int,
	Email varchar(100),
	Phone_Number varchar(100),
	
	CONSTRAINT Customer_ID PRIMARY KEY (Customer_ID)
);

CREATE TABLE Booking (
	Booking_ID varchar(10) NOT NULL,
	Showtime_ID varchar(10),
	Customer_ID varchar(10),
	Cinema_ID varchar(10),
	Promotion_ID varchar(10),
	Movie_ID varchar(10),
	Booking_Date Date,
	
	CONSTRAINT Booking_ID PRIMARY KEY (Booking_ID),
	FOREIGN KEY (Showtime_ID) REFERENCES Showtime(Showtime_ID),
	FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),
	FOREIGN KEY (Cinema_ID) REFERENCES Cinema(Cinema_ID),
	FOREIGN KEY (Promotion_ID) REFERENCES Promotion(Promotion_ID),
	FOREIGN KEY (Movie_ID) REFERENCES Movie(Movie_ID)

);

-- Insert into Movie
INSERT INTO Movie VALUES 
('M001', 'Polis Evo 3', 'Action', '03:01:00', '2023-05-25', 'PG-13'),
('M002', 'The Super Mario Bros. Movie', 'Animation', '01:40:00', '2023-04-20', 'G'),
('M003', 'Spider-Man: Across the Spider-Verse', 'Animation', '01:43:00', '2023-06-02', 'PG'),
('M004', 'Luther: The Fallen Sun', 'Drama', '02:02:00', '2023-02-24', 'R'),
('M005', 'Missing', 'Thriller', '02:12:00', '2023-01-20', 'R'),
('M006', 'Oppenheimer', 'War', '01:59:00', '2023-07-21', 'R'),
('M007', 'Murder Mystery 2', 'Comedy', '01:48:00', '2023-03-31', 'PG-13'),
('M008', 'Fast X', 'Action', '02:32:00', '2023-05-18', 'PG-13'),
('M009', 'Creed III', 'Drama', '02:15:00', '2023-03-03', 'PG'),
('M010', 'The Super Marios', 'Animation', '01:58:00', '2023-04-20', 'PG');

-- Insert into Cinema
INSERT INTO Cinema VALUES 
('C001', 'Kuala Lumpur', 'H001', 100),
('C002', 'Penang', 'H002', 120),
('C003', 'Ipoh', 'H003', 90),
('C004', 'Kuching', 'H004', 110),
('C005', 'Johor Bahru', 'H005', 80),
('C006', 'Kota Kinabalu', 'H006', 130),
('C007', 'Shah Alam', 'H007', 120),
('C008', 'Melaka', 'H008', 100),
('C009', 'Alor Setar', 'H009', 110),
('C010', 'Kuantan', 'H010', 90);

-- Insert into Showtime
INSERT INTO Showtime VALUES 
('S001', 'M001', 'C001', '14:00:00', '17:01:00'),
('S002', 'M002', 'C002', '15:00:00', '16:40:00'),
('S003', 'M003', 'C003', '16:00:00', '17:43:00'),
('S004', 'M004', 'C004', '17:00:00', '19:02:00'),
('S005', 'M005', 'C005', '18:00:00', '20:12:00'),
('S006', 'M006', 'C006', '19:00:00', '20:59:00'),
('S007', 'M007', 'C007', '20:00:00', '21:48:00'),
('S008', 'M008', 'C008', '21:00:00', '23:32:00'),
('S009', 'M009', 'C009', '22:00:00', '00:15:00'),
('S010', 'M010', 'C010', '23:00:00', '00:58:00');

-- Insert into Promotion
INSERT INTO Promotion VALUES 
('P001', 'Buy 1 Get 1 Free', '2023-05-01', '2023-05-31'),
('P002', '20% off on weekdays', '2023-04-01', '2023-04-30'),
('P003', '30% off for students', '2023-06-01', '2023-06-30'),
('P004', '50% off for seniors', '2023-07-01', '2023-07-31'),
('P005', 'Free popcorn', '2023-08-01', '2023-08-31'),
('P006', 'Free drink', '2023-09-01', '2023-09-30'),
('P007', 'Discount on new releases', '2023-10-01', '2023-10-31'),
('P008', 'Loyalty program discount', '2023-11-01', '2023-11-30'),
('P009', 'Early bird discount', '2023-12-01', '2023-12-31'),
('P010', 'Off-peak discount', '2024-01-01', '2024-01-31');

-- Insert into Customer
INSERT INTO Customer VALUES 
('CU001', 'Ahmad Bin Ali', 25, 'ahmad.ali@gmail.com', '1234567890'),
('CU002', 'Siti Binti Abdul', 30, 'siti.abdul@gmail.com', '0987654321'),
('CU003', 'Mohd Tan Wei', 35, 'mohd.tan@gmail.com', '1122334455'),
('CU004', 'Amina Binti Idris', 40, 'amina.idris@gmail.com', '2233445566'),
('CU005', 'Chong Wei Ming', 45, 'chong.wm@gmail.com', '3344556677'),
('CU006', 'Nurul Izzah Anwar', 50, 'nurul.anwar@gmail.com', '4455667788'),
('CU007', 'Lim Guan Eng', 55, 'lim.ge@gmail.com', '5566778899'),
('CU008', 'Fatimah Binti Ismail', 60, 'fatimah.ismail@gmail.com', '6677889900'),
('CU009', 'Kumar S/O Raju', 65, 'kumar.raju@gmail.com', '7788990011'),
('CU010', 'Aishah Binti Hassan', 70, 'aishah.hassan@gmail.com', '8899001122');


-- Insert into Booking
INSERT INTO Booking VALUES 
('B001', 'S001', 'CU001', 'C001', 'P001', 'M001', '2023-05-12'),
('B002', 'S002', 'CU002', 'C002', 'P002', 'M002', '2023-05-12'),
('B003', 'S003', 'CU003', 'C003', 'P003', 'M003', '2023-05-12'),
('B004', 'S004', 'CU004', 'C004', 'P004', 'M004', '2023-05-12'),
('B005', 'S005', 'CU005', 'C005', 'P005', 'M005', '2023-05-12'),
('B006', 'S006', 'CU006', 'C006', 'P006', 'M006', '2023-05-12'),
('B007', 'S007', 'CU007', 'C007', 'P007', 'M007', '2023-05-12'),
('B008', 'S008', 'CU008', 'C008', 'P008', 'M008', '2023-05-12'),
('B009', 'S009', 'CU009', 'C009', 'P009', 'M009', '2023-05-12'),
('B010', 'S010', 'CU010', 'C010', 'P010', 'M010', '2023-05-12');


-- user-defined-function named TotalDuration that calculates the total duration of movies watched by a customer.
-- TotalDurationTable must be executed first to create the TotalDurationTable containing customer_ID, name and total duration interval
CREATE TABLE TotalDurationTable (
    customer_id varchar(10),
    name varchar(50),
    total_duration interval
);

-- The User-Defined Function 
CREATE OR REPLACE FUNCTION TotalDuration()
RETURNS VOID
AS $$
DECLARE
    customer_id_param varchar(10);
    customer_cursor CURSOR FOR SELECT Customer_ID FROM Customer;
BEGIN
    OPEN customer_cursor;
    LOOP
        FETCH customer_cursor INTO customer_id_param;
        EXIT WHEN NOT FOUND;
        
        INSERT INTO TotalDurationTable (customer_id, name, total_duration)
        SELECT
            c.Customer_ID,
            c.Name,
            SUM(m.Duration) AS total_duration
        FROM
            Customer c
        INNER JOIN
            Booking b ON c.Customer_ID = b.Customer_ID
        INNER JOIN
            Movie m ON b.Movie_ID = m.Movie_ID
        WHERE
            c.Customer_ID = customer_id_param
        GROUP BY
            c.Customer_ID,
            c.Name;
    END LOOP;
    
    CLOSE customer_cursor;
END;
$$LANGUAGE'plpgsql';


-- Select and execute the UDF and refresh the TotalDurationTable
-- This will return the total duration as an interval value, indicating the accumulated duration of movies watched by the customer
SELECT TotalDuration();



-- VIEW SAMPLE 1 --
CREATE OR REPLACE VIEW Showtime_Details_View AS
SELECT S.Showtime_ID, S.Start_Time, S.End_Time, M.Movie_Title, C.Location
FROM Showtime S
JOIN Movie M ON S.Movie_ID = M.Movie_ID
JOIN Cinema C ON S.Cinema_ID = C.Cinema_ID;

SELECT * FROM Showtime_Details_View;

-- VIEW SAMPLE 2 --
CREATE OR REPLACE VIEW Movie_Booking_View AS
SELECT B.Booking_ID, B.Booking_Date, M.Movie_Title, M.Genre, CN.Location, S.Start_Time, S.End_Time, P.Description, C.Name AS Customer_Name, C.Email
FROM Booking B
JOIN Movie M ON B.Movie_ID = M.Movie_ID
JOIN Cinema CN ON B.Cinema_ID = CN.Cinema_ID
JOIN Showtime S ON B.Showtime_ID = S.Showtime_ID
JOIN Promotion P ON B.Promotion_ID = P.Promotion_ID
JOIN Customer C ON B.Customer_ID = C.Customer_ID;

SELECT * FROM Movie_Booking_View;


-- VIEW SAMPLE 3 --
CREATE OR REPLACE VIEW detailed_bookings AS
SELECT 
    B.Booking_ID,
    C.Name AS Customer_Name,
    M.Movie_Title,
    S.Start_Time,
    S.End_Time,
    Ci.Location AS Cinema_Location,
    P.Description AS Promotion_Description,
    COUNT(*) OVER (PARTITION BY B.Customer_ID) AS Total_Customer_Bookings
FROM 
    Booking B
INNER JOIN 
    Customer C ON B.Customer_ID = C.Customer_ID
INNER JOIN 
    Movie M ON B.Movie_ID = M.Movie_ID
INNER JOIN 
    Showtime S ON B.Showtime_ID = S.Showtime_ID
INNER JOIN 
    Cinema Ci ON B.Cinema_ID = Ci.Cinema_ID
LEFT JOIN 
    Promotion P ON B.Promotion_ID = P.Promotion_ID
ORDER BY 
    B.Booking_ID;
   
-- SELECT * FROM detailed_bookings;
-- OR --
SELECT * 
FROM detailed_bookings
WHERE Customer_Name = 'Ahmad Bin Ali';
